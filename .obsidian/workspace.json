{
  "main": {
    "id": "82e04c108335f0ba",
    "type": "split",
    "children": [
      {
        "id": "bb454eacf2c77428",
        "type": "tabs",
        "children": [
          {
            "id": "4107afaa79ca6df7",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "Competitive Programming/Data Structures/Trees/Disjoint Set Union.md",
                "mode": "source",
                "backlinks": false,
                "source": false
              }
            }
          }
        ]
      }
    ],
    "direction": "vertical"
  },
  "left": {
    "id": "7df82c6db3768094",
    "type": "split",
    "children": [
      {
        "id": "6d451705aeafefc0",
        "type": "tabs",
        "children": [
          {
            "id": "73e68f4042b908ce",
            "type": "leaf",
            "state": {
              "type": "file-explorer",
              "state": {
                "sortOrder": "alphabetical"
              }
            }
          },
          {
            "id": "5b44d258e43b9e9c",
            "type": "leaf",
            "state": {
              "type": "search",
              "state": {
                "query": "tag:#excalidraw",
                "matchingCase": false,
                "explainSearch": false,
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical"
              }
            }
          },
          {
            "id": "157051a422d1675e",
            "type": "leaf",
            "state": {
              "type": "bookmarks",
              "state": {}
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 241.50260543823242
  },
  "right": {
    "id": "79f8c558b83a1164",
    "type": "split",
    "children": [
      {
        "id": "6686fb16ad2ece5c",
        "type": "tabs",
        "children": [
          {
            "id": "b770e66c8579e300",
            "type": "leaf",
            "state": {
              "type": "backlink",
              "state": {
                "file": "Competitive Programming/Data Structures/Trees/Disjoint Set Union.md",
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical",
                "showSearch": false,
                "searchQuery": "",
                "backlinkCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "2ffe054db06c44ed",
            "type": "leaf",
            "state": {
              "type": "outgoing-link",
              "state": {
                "file": "Competitive Programming/Data Structures/Trees/Disjoint Set Union.md",
                "linksCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "3b63461994838e09",
            "type": "leaf",
            "state": {
              "type": "tag",
              "state": {
                "sortOrder": "frequency",
                "useHierarchy": true
              }
            }
          },
          {
            "id": "9a795c0670258931",
            "type": "leaf",
            "state": {
              "type": "outline",
              "state": {
                "file": "Competitive Programming/Data Structures/Trees/Disjoint Set Union.md"
              }
            }
          },
          {
            "id": "267f4f434983ab0c",
            "type": "leaf",
            "state": {
              "type": "advanced-tables-toolbar",
              "state": {}
            }
          },
          {
            "id": "0aaa561ba75ba812",
            "type": "leaf",
            "state": {
              "type": "mermaid-toolbar-view",
              "state": {}
            }
          }
        ],
        "currentTab": 5
      }
    ],
    "direction": "horizontal",
    "width": 300,
    "collapsed": true
  },
  "left-ribbon": {
    "hiddenItems": {
      "table-editor-obsidian:Advanced Tables Toolbar": false,
      "obsidian-excalidraw-plugin:Create new drawing": false,
      "switcher:Open quick switcher": false,
      "graph:Open graph view": false,
      "canvas:Create new canvas": false,
      "daily-notes:Open today's daily note": false,
      "templates:Insert template": false,
      "command-palette:Open command palette": false,
      "publish:Publish changes...": false,
      "mermaid-tools:Open Mermaid Toolbar": false
    }
  },
  "active": "4107afaa79ca6df7",
  "lastOpenFiles": [
    "Competitive Programming/Data Structures/Sparse Table.md",
    "Competitive Programming/Data Structures/Trees/Disjoint Set Union.md",
    "Excalidraw/Drawing 2024-06-01 04.54.28.excalidraw.md",
    "Competitive Programming/STL/Forward List.md",
    "Excalidraw",
    "Competitive Programming/Data Structures/Trees",
    "Competitive Programming/Tricks.md",
    "Competitive Programming/Number Theory/Bit Manipulation.md",
    "Competitive Programming/Number Theory/Integer Factorization.md",
    "Competitive Programming/Data Structures/Minimum Stack & Queue.md",
    "Competitive Programming/Arrays/Longest Subarray with Sum K.md",
    "Competitive Programming/Miscellaneous/Longest Subarray with Sum k (Positives & Negatives).md",
    "Competitive Programming/Sorting/Quick Sort.md",
    "Competitive Programming/Sorting/Selection Sort.md",
    "Competitive Programming/STL/Map.md",
    "Competitive Programming/STL/Unordered Map.md",
    "Competitive Programming/Arrays",
    "Random Shit/Delete.md",
    "Competitive Programming/Number Theory/Binary Exponentiation.md",
    "Competitive Programming/Sorting/Bubble Sort.md",
    "Competitive Programming/Sorting/Insertion Sort.md",
    "Competitive Programming/Sorting/Merge Sort.md",
    "Competitive Programming/STL/Queue.md",
    "Competitive Programming/STL/Stack.md",
    "Competitive Programming/Sorting",
    "Competitive Programming/Number Theory/Submask Enumeration.md",
    "Competitive Programming/Data Structures",
    "Competitive Programming/Number Theory/Linear Congruence Equation.md",
    "Competitive Programming/Number Theory/Modular Inverse.md",
    "Competitive Programming/Number Theory/Euclidean Algorithm.md",
    "Competitive Programming/Number Theory/Linear Diophantine Equation.md",
    "Pasted image 20240506132646.png",
    "Pasted image 20240506132141.png",
    "Pasted image 20240508212025.png",
    "Pasted image 20240508211903.png",
    "Pasted image 20240508211834.png",
    "Pasted image 20240508211816.png",
    "Pasted image 20240508211624.png",
    "Pasted image 20240508211403.png",
    "Pasted image 20240508211252.png",
    "Pasted image 20240506140938.png",
    "Random Shit",
    "Competitive Programming/STL",
    "Competitive Programming/Tricks",
    "Competitive Programming/Number Theory",
    "Competitive Programming"
  ]
}